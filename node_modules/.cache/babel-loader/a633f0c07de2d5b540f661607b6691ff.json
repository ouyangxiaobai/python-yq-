{"remainingRequest":"D:\\共享文件\\code space\\疫情统计分析软件\\22\\epidemicmanagementweb\\node_modules\\babel-loader\\lib\\index.js!D:\\共享文件\\code space\\疫情统计分析软件\\22\\epidemicmanagementweb\\src\\store\\modules\\permission.js","dependencies":[{"path":"D:\\共享文件\\code space\\疫情统计分析软件\\22\\epidemicmanagementweb\\src\\store\\modules\\permission.js","mtime":1652251439000},{"path":"D:\\共享文件\\code space\\疫情统计分析软件\\22\\epidemicmanagementweb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\共享文件\\code space\\疫情统计分析软件\\22\\epidemicmanagementweb\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiRDovXHU1MTcxXHU0RUFCXHU2NTg3XHU0RUY2L2NvZGUgc3BhY2UvXHU3NUFCXHU2MEM1XHU3RURGXHU4QkExXHU1MjA2XHU2NzkwXHU4RjZGXHU0RUY2LzIyL2VwaWRlbWljbWFuYWdlbWVudHdlYi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMiI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwovLyDmnYPpmZDnrqHnkIbmqKHlnZcKaW1wb3J0IHsgYXN5bmNSb3V0ZXMsIGNvbnN0Um91dGVyIH0gZnJvbSAnQC9yb3V0ZXInOwovKioKICog5qC55o2u6Lev55SxbWV0YS5yb2xlIOehruWumuaYr+WQpuW9k+WJjeeUqOaIt+aLpeacieiuv+mXruadg+mZkAogKiBAcm9sZXMg55So5oi35oul5pyJ6KeS6ImyCiAqIEByb3V0ZSDlvoXliKTlrprot6/nlLEKICogCiAqIAogKiAKKi8KCmZ1bmN0aW9uIGhhc1Blcm1pc3Npb24ocm9sZXMsIHJvdXRlKSB7CiAgLy8g5aaC5p6c5b2T5YmN6Lev55Sx5pyJcm9sZXMg5a2X5q615YiZ6ZyA6KaB5Yik5pat55So5oi36K6/6Zeu5p2D6ZmQCiAgaWYgKHJvdXRlLm1ldGEgJiYgcm91dGUubWV0YS5yb2xlcykgewogICAgLy8g6Iul55So5oi35oul5pyJ55qE6KeS6Imy5Lit5pyJ6KKr5YyF5ZCr5Zyo5b6F5a6a6Lev55Sx6KeS6Imy6KGo5Lit55qE5YiZ5oul5pyJ6K6/6Zeu5p2D6ZmQCiAgICByZXR1cm4gcm9sZXMuc29tZShmdW5jdGlvbiAocm9sZSkgewogICAgICByZXR1cm4gcm91dGUubWV0YS5yb2xlcy5pbmNsdWRlcyhyb2xlKTsKICAgIH0pOwogIH0gZWxzZSB7CiAgICAvLyDmsqHmnInorr7nva5yb2xlcyDliJnml6DpnIDliKTlrprljbPlj6/orr/pl64KICAgIHJldHVybiB0cnVlOwogIH0KfQovKioKICog6YCS5b2S6L+H5rukQXN5bmNSb3V0ZXPot6/nlLHooagKICogQHJvdXRlcyDlvoXov4fmu6Tot6/nlLHooags6aaW5qyh5Lyg5YWl55qE5bCx5pivQXN5bmNSb3V0ZXMKICogQHJvbGVzIOeUqOaIt+aLpeacieinkuiJsgogKiAKKi8KCgpleHBvcnQgZnVuY3Rpb24gZmlsdGVyQXN5bmNSb3V0ZXMocm91dGVzLCByb2xlcykgewogIHZhciByZXMgPSBbXTsKICByb3V0ZXMuZm9yRWFjaChmdW5jdGlvbiAocm91dGUpIHsKICAgIC8vIOWkjeWItuS4gOS7vQogICAgdmFyIHRtcCA9IF9vYmplY3RTcHJlYWQoe30sIHJvdXRlKTsgLy8g5aaC5p6c55So5oi35pyJ6K6/6Zeu5p2D6ZmQ5YiZ5Yqg5YWl57uT5p6c6Lev55Sx6KGoCgoKICAgIGlmIChoYXNQZXJtaXNzaW9uKHJvbGVzLCB0bXApKSB7CiAgICAgIC8vIOWmguaenOWtmOWcqOWtkOi3r+eUseWImemAkuW9kui/h+a7pOS5iwogICAgICBpZiAodG1wLmNoaWxkcmVuKSB7CiAgICAgICAgdG1wLmNoaWxkcmVuID0gZmlsdGVyQXN5bmNSb3V0ZXModG1wLmNoaWxkcmVuLCByb2xlcyk7CiAgICAgIH0KCiAgICAgIHJlcy5wdXNoKHRtcCk7CiAgICB9CiAgfSk7CiAgcmV0dXJuIHJlczsKfQp2YXIgc3RhdGUgPSB7CiAgcm91dGVzOiBbXSwKICAvL+WujOaVtOi3r+eUseihqAogIGFkZFJvdXRlczogW10gLy/nlKjmiLflj6/orr/pl67ot6/nlLHooagKCn07CnZhciBtdXRhdGlvbnMgPSB7CiAgU0VUX1JPVVRFUzogZnVuY3Rpb24gU0VUX1JPVVRFUyhzdGF0ZSwgcm91dGVzKSB7CiAgICAvLyByb3V0ZXMg55So5oi35Y+v5Lul6K6/6Zeu55qE5p2D6ZmQCiAgICBzdGF0ZS5hZGRSb3V0ZXMgPSByb3V0ZXM7IC8vIOWujOaVtOeahOi3r+eUseihqAoKICAgIHN0YXRlLnJvdXRlcyA9IGNvbnN0Um91dGVyLmNvbmNhdChyb3V0ZXMpOwogIH0KfTsKdmFyIGFjdGlvbnMgPSB7CiAgZ2VuZXJhdGVSb3V0ZXM6IGZ1bmN0aW9uIGdlbmVyYXRlUm91dGVzKF9yZWYsIHJvbGVzKSB7CiAgICB2YXIgY29tbWl0ID0gX3JlZi5jb21taXQ7CiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsKICAgICAgdmFyIGFjY2Vzc2VkUm91dGVzOyAvLyDnlKjmiLfmmK/nrqHnkIblkZjliJnmi6XmnInlrozmlbTorr/pl67mnYPpmZAKCiAgICAgIGlmIChyb2xlcy5pbmNsdWRlcygnYWRtaW4nKSkgewogICAgICAgIGFjY2Vzc2VkUm91dGVzID0gYXN5bmNSb3V0ZXMgfHwgW107CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gY29uc29sZS5sb2cocm9sZXMpCiAgICAgICAgLy8gIOWQpuWImemcgOimgeagueaNrueUqOaIt+inkuiJsuWBmui/h+a7pOWkhOeQhiBqZXJyeQogICAgICAgIGFjY2Vzc2VkUm91dGVzID0gZmlsdGVyQXN5bmNSb3V0ZXMoYXN5bmNSb3V0ZXMsIHJvbGVzKTsKICAgICAgfQoKICAgICAgY29tbWl0KCdTRVRfUk9VVEVTJywgYWNjZXNzZWRSb3V0ZXMpOwogICAgICByZXNvbHZlKGFjY2Vzc2VkUm91dGVzKTsKICAgIH0pOwogIH0KfTsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWVzcGFjZWQ6IHRydWUsCiAgc3RhdGU6IHN0YXRlLAogIG11dGF0aW9uczogbXV0YXRpb25zLAogIGFjdGlvbnM6IGFjdGlvbnMKfTs="},{"version":3,"sources":["D:/共享文件/code space/疫情统计分析软件/22/epidemicmanagementweb/src/store/modules/permission.js"],"names":["asyncRoutes","constRouter","hasPermission","roles","route","meta","some","role","includes","filterAsyncRoutes","routes","res","forEach","tmp","children","push","state","addRoutes","mutations","SET_ROUTES","concat","actions","generateRoutes","commit","Promise","resolve","accessedRoutes","namespaced"],"mappings":";;;;;;AAAA;AACA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,UAAzC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,CAAwBC,KAAxB,EAA8BC,KAA9B,EAAoC;AAEhC;AACA,MAAGA,KAAK,CAACC,IAAN,IAAcD,KAAK,CAACC,IAAN,CAAWF,KAA5B,EAAkC;AAC9B;AACA,WAAOA,KAAK,CAACG,IAAN,CAAW,UAAAC,IAAI;AAAA,aAAIH,KAAK,CAACC,IAAN,CAAWF,KAAX,CAAiBK,QAAjB,CAA0BD,IAA1B,CAAJ;AAAA,KAAf,CAAP;AACH,GAHD,MAGM;AACF;AACA,WAAO,IAAP;AACH;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASE,iBAAT,CAA2BC,MAA3B,EAAkCP,KAAlC,EAAwC;AAC3C,MAAMQ,GAAG,GAAG,EAAZ;AAEAD,EAAAA,MAAM,CAACE,OAAP,CAAe,UAAAR,KAAK,EAAI;AACpB;AACA,QAAMS,GAAG,qBAAQT,KAAR,CAAT,CAFoB,CAIpB;;;AACA,QAAGF,aAAa,CAACC,KAAD,EAAOU,GAAP,CAAhB,EAA4B;AACxB;AACA,UAAGA,GAAG,CAACC,QAAP,EAAgB;AACZD,QAAAA,GAAG,CAACC,QAAJ,GAAeL,iBAAiB,CAACI,GAAG,CAACC,QAAL,EAAcX,KAAd,CAAhC;AACH;;AACDQ,MAAAA,GAAG,CAACI,IAAJ,CAASF,GAAT;AACH;AACJ,GAZD;AAcA,SAAOF,GAAP;AACH;AAED,IAAMK,KAAK,GAAG;AACVN,EAAAA,MAAM,EAAE,EADE;AACE;AACZO,EAAAA,SAAS,EAAE,EAFD,CAEK;;AAFL,CAAd;AAKA,IAAMC,SAAS,GAAG;AACdC,EAAAA,UAAU,EAAE,oBAACH,KAAD,EAAQN,MAAR,EAAmB;AAC3B;AACAM,IAAAA,KAAK,CAACC,SAAN,GAAkBP,MAAlB,CAF2B,CAG3B;;AAEAM,IAAAA,KAAK,CAACN,MAAN,GAAeT,WAAW,CAACmB,MAAZ,CAAmBV,MAAnB,CAAf;AAEH;AARa,CAAlB;AAWA,IAAMW,OAAO,GAAG;AACZC,EAAAA,cADY,gCACenB,KADf,EACsB;AAAA,QAAjBoB,MAAiB,QAAjBA,MAAiB;AAC9B,WAAO,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAE1B,UAAIC,cAAJ,CAF0B,CAG1B;;AACA,UAAGvB,KAAK,CAACK,QAAN,CAAe,OAAf,CAAH,EAA2B;AACvBkB,QAAAA,cAAc,GAAG1B,WAAW,IAAI,EAAhC;AACH,OAFD,MAEK;AACD;AACA;AACA0B,QAAAA,cAAc,GAAGjB,iBAAiB,CAACT,WAAD,EAAaG,KAAb,CAAlC;AACH;;AAEDoB,MAAAA,MAAM,CAAC,YAAD,EAAcG,cAAd,CAAN;AAEAD,MAAAA,OAAO,CAACC,cAAD,CAAP;AACH,KAfM,CAAP;AAgBH;AAlBW,CAAhB;AAqBA,eAAe;AACXC,EAAAA,UAAU,EAAE,IADD;AAEXX,EAAAA,KAAK,EAALA,KAFW;AAGXE,EAAAA,SAAS,EAATA,SAHW;AAIXG,EAAAA,OAAO,EAAPA;AAJW,CAAf","sourcesContent":["// 权限管理模块\nimport { asyncRoutes, constRouter } from '@/router'\n\n/**\n * 根据路由meta.role 确定是否当前用户拥有访问权限\n * @roles 用户拥有角色\n * @route 待判定路由\n * \n * \n * \n*/\nfunction hasPermission (roles,route){\n   \n    // 如果当前路由有roles 字段则需要判断用户访问权限\n    if(route.meta && route.meta.roles){\n        // 若用户拥有的角色中有被包含在待定路由角色表中的则拥有访问权限\n        return roles.some(role => route.meta.roles.includes(role))\n    } else{\n        // 没有设置roles 则无需判定即可访问\n        return true;\n    }\n}\n\n/**\n * 递归过滤AsyncRoutes路由表\n * @routes 待过滤路由表,首次传入的就是AsyncRoutes\n * @roles 用户拥有角色\n * \n*/\nexport function filterAsyncRoutes(routes,roles){\n    const res = []\n   \n    routes.forEach(route => {\n        // 复制一份\n        const tmp = { ...route}\n       \n        // 如果用户有访问权限则加入结果路由表\n        if(hasPermission(roles,tmp)){\n            // 如果存在子路由则递归过滤之\n            if(tmp.children){\n                tmp.children = filterAsyncRoutes(tmp.children,roles)\n            }\n            res.push(tmp)\n        }\n    })\n    \n    return res;\n}\n\nconst state = {\n    routes: [], //完整路由表\n    addRoutes: []  //用户可访问路由表\n}\n\nconst mutations = {\n    SET_ROUTES: (state, routes) => {\n        // routes 用户可以访问的权限\n        state.addRoutes = routes\n        // 完整的路由表\n        \n        state.routes = constRouter.concat(routes)\n       \n    }\n}\n\nconst actions = {\n    generateRoutes({ commit }, roles) {\n        return new Promise(resolve => {\n            \n            let accessedRoutes;\n            // 用户是管理员则拥有完整访问权限\n            if(roles.includes('admin')){\n                accessedRoutes = asyncRoutes || []\n            }else{\n                // console.log(roles)\n                //  否则需要根据用户角色做过滤处理 jerry\n                accessedRoutes = filterAsyncRoutes(asyncRoutes,roles)\n            }\n          \n            commit('SET_ROUTES',accessedRoutes)\n       \n            resolve(accessedRoutes)\n        })\n    }\n}\n\nexport default {\n    namespaced: true,\n    state,\n    mutations,\n    actions\n}"]}]}