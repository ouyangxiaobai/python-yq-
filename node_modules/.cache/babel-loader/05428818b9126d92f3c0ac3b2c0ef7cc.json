{"remainingRequest":"C:\\Users\\86188\\Desktop\\22\\epidemicmanagementweb\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\86188\\Desktop\\22\\epidemicmanagementweb\\src\\utils\\request.js","dependencies":[{"path":"C:\\Users\\86188\\Desktop\\22\\epidemicmanagementweb\\src\\utils\\request.js","mtime":1652251439000},{"path":"C:\\Users\\86188\\Desktop\\22\\epidemicmanagementweb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\86188\\Desktop\\22\\epidemicmanagementweb\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCBheGlvcyBmcm9tICJheGlvcyI7CmltcG9ydCB7IE1lc3NhZ2VCb3gsIE1lc3NhZ2UgfSBmcm9tICJlbGVtZW50LXVpIjsKaW1wb3J0IHN0b3JlIGZyb20gIkAvc3RvcmUiOwppbXBvcnQgeyBnZXRUb2tlbiB9IGZyb20gIkAvdXRpbHMvYXV0aCI7IC8vIGNyZWF0ZSBhbiBheGlvcyBpbnN0YW5jZQoKdmFyIHNlcnZpY2UgPSBheGlvcy5jcmVhdGUoewogIGJhc2VVUkw6IHByb2Nlc3MuZW52LlZVRV9BUFBfQkFTRV9BUEksCiAgLy8gdXJsID0gYmFzZSB1cmwgKyByZXF1ZXN0IHVybAogIC8vIHdpdGhDcmVkZW50aWFsczogdHJ1ZSwgLy8gc2VuZCBjb29raWVzIHdoZW4gY3Jvc3MtZG9tYWluIHJlcXVlc3RzCiAgdGltZW91dDogNTAwMCAvLyByZXF1ZXN0IHRpbWVvdXQKCn0pOyAvLyByZXF1ZXN0IGludGVyY2VwdG9yCgpzZXJ2aWNlLmludGVyY2VwdG9ycy5yZXF1ZXN0LnVzZShmdW5jdGlvbiAoY29uZmlnKSB7CiAgLy8gZG8gc29tZXRoaW5nIGJlZm9yZSByZXF1ZXN0IGlzIHNlbnQKICBpZiAoc3RvcmUuZ2V0dGVycy50b2tlbikgewogICAgLy8gbGV0IGVhY2ggcmVxdWVzdCBjYXJyeSB0b2tlbgogICAgLy8gWydYLVRva2VuJ10gaXMgYSBjdXN0b20gaGVhZGVycyBrZXkKICAgIC8vIHBsZWFzZSBtb2RpZnkgaXQgYWNjb3JkaW5nIHRvIHRoZSBhY3R1YWwgc2l0dWF0aW9uCiAgICBjb25maWcuaGVhZGVyc1siWC1Ub2tlbiJdID0gZ2V0VG9rZW4oKTsKICB9CgogIHJldHVybiBjb25maWc7Cn0sIGZ1bmN0aW9uIChlcnJvcikgewogIC8vIGRvIHNvbWV0aGluZyB3aXRoIHJlcXVlc3QgZXJyb3IKICBjb25zb2xlLmxvZyhlcnJvcik7IC8vIGZvciBkZWJ1ZwoKICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpOwp9KTsgLy8gcmVzcG9uc2UgaW50ZXJjZXB0b3IKCnNlcnZpY2UuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLnVzZSgKLyoqCiAqIElmIHlvdSB3YW50IHRvIGdldCBodHRwIGluZm9ybWF0aW9uIHN1Y2ggYXMgaGVhZGVycyBvciBzdGF0dXMKICogUGxlYXNlIHJldHVybiAgcmVzcG9uc2UgPT4gcmVzcG9uc2UKICovCgovKioKICogRGV0ZXJtaW5lIHRoZSByZXF1ZXN0IHN0YXR1cyBieSBjdXN0b20gY29kZQogKiBIZXJlIGlzIGp1c3QgYW4gZXhhbXBsZQogKiBZb3UgY2FuIGFsc28ganVkZ2UgdGhlIHN0YXR1cyBieSBIVFRQIFN0YXR1cyBDb2RlCiAqLwpmdW5jdGlvbiAocmVzcG9uc2UpIHsKICB2YXIgcmVzID0gcmVzcG9uc2UuZGF0YTsKICByZXR1cm4gcmVzOyAvLyBpZiB0aGUgY3VzdG9tIGNvZGUgaXMgbm90IDIwMDAwLCBpdCBpcyBqdWRnZWQgYXMgYW4gZXJyb3IuCiAgLy8gaWYgKHJlcy5jb2RlICE9PSAyMDAwMCkgewogIC8vICAgICBNZXNzYWdlKHsKICAvLyAgICAgICAgIG1lc3NhZ2U6IHJlcy5tZXNzYWdlIHx8ICJFcnJvciIsCiAgLy8gICAgICAgICB0eXBlOiAiZXJyb3IiLAogIC8vICAgICAgICAgZHVyYXRpb246IDUgKiAxMDAwLAogIC8vICAgICB9KTsKICAvLyAgICAgLy8gNTAwMDg6IElsbGVnYWwgdG9rZW47IDUwMDEyOiBPdGhlciBjbGllbnRzIGxvZ2dlZCBpbjsgNTAwMTQ6IFRva2VuIGV4cGlyZWQ7CiAgLy8gICAgIGlmIChyZXMuY29kZSA9PT0gNTAwMDggfHwgcmVzLmNvZGUgPT09IDUwMDEyIHx8IHJlcy5jb2RlID09PSA1MDAxNCkgewogIC8vICAgICAgICAgLy8gdG8gcmUtbG9naW4KICAvLyAgICAgICAgIE1lc3NhZ2VCb3guY29uZmlybSgKICAvLyAgICAgICAgICAgICAiWW91IGhhdmUgYmVlbiBsb2dnZWQgb3V0LCB5b3UgY2FuIGNhbmNlbCB0byBzdGF5IG9uIHRoaXMgcGFnZSwgb3IgbG9nIGluIGFnYWluIiwKICAvLyAgICAgICAgICAgICAiQ29uZmlybSBsb2dvdXQiLCB7CiAgLy8gICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAiUmUtTG9naW4iLAogIC8vICAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiAiQ2FuY2VsIiwKICAvLyAgICAgICAgICAgICAgICAgdHlwZTogIndhcm5pbmciLAogIC8vICAgICAgICAgICAgIH0KICAvLyAgICAgICAgICkudGhlbigoKSA9PiB7CiAgLy8gICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goInVzZXIvcmVzZXRUb2tlbiIpLnRoZW4oKCkgPT4gewogIC8vICAgICAgICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKTsKICAvLyAgICAgICAgICAgICB9KTsKICAvLyAgICAgICAgIH0pOwogIC8vICAgICB9CiAgLy8gICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IocmVzLm1lc3NhZ2UgfHwgIkVycm9yIikpOwogIC8vIH0gZWxzZSB7CiAgLy8KICAvLyB9CgogIHJldHVybiByZXM7Cn0sIGZ1bmN0aW9uIChlcnJvcikgewogIGNvbnNvbGUubG9nKCJlcnIiICsgZXJyb3IpOyAvLyBmb3IgZGVidWcKCiAgTWVzc2FnZSh7CiAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLAogICAgdHlwZTogImVycm9yIiwKICAgIGR1cmF0aW9uOiA1ICogMTAwMAogIH0pOwogIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7Cn0pOwpleHBvcnQgZGVmYXVsdCBzZXJ2aWNlOw=="},{"version":3,"sources":["C:/Users/86188/Desktop/22/epidemicmanagementweb/src/utils/request.js"],"names":["axios","MessageBox","Message","store","getToken","service","create","baseURL","process","env","VUE_APP_BASE_API","timeout","interceptors","request","use","config","getters","token","headers","error","console","log","Promise","reject","response","res","data","message","type","duration"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,YAApC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,QAAT,QAAyB,cAAzB,C,CAEA;;AACA,IAAMC,OAAO,GAAGL,KAAK,CAACM,MAAN,CAAa;AACzBC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBADI;AACc;AACvC;AACAC,EAAAA,OAAO,EAAE,IAHgB,CAGV;;AAHU,CAAb,CAAhB,C,CAMA;;AACAN,OAAO,CAACO,YAAR,CAAqBC,OAArB,CAA6BC,GAA7B,CACI,UAACC,MAAD,EAAY;AACR;AAEA,MAAIZ,KAAK,CAACa,OAAN,CAAcC,KAAlB,EAAyB;AACrB;AACA;AACA;AACAF,IAAAA,MAAM,CAACG,OAAP,CAAe,SAAf,IAA4Bd,QAAQ,EAApC;AACH;;AACD,SAAOW,MAAP;AACH,CAXL,EAYI,UAACI,KAAD,EAAW;AACP;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAFO,CAEa;;AACpB,SAAOG,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH,CAhBL,E,CAmBA;;AACAd,OAAO,CAACO,YAAR,CAAqBY,QAArB,CAA8BV,GAA9B;AACI;AACJ;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACI,UAACU,QAAD,EAAc;AACV,MAAMC,GAAG,GAAGD,QAAQ,CAACE,IAArB;AACA,SAAOD,GAAP,CAFU,CAMV;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAOA,GAAP;AACH,CA9CL,EA+CI,UAACN,KAAD,EAAW;AACPC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAQF,KAApB,EADO,CACqB;;AAC5BjB,EAAAA,OAAO,CAAC;AACJyB,IAAAA,OAAO,EAAER,KAAK,CAACQ,OADX;AAEJC,IAAAA,IAAI,EAAE,OAFF;AAGJC,IAAAA,QAAQ,EAAE,IAAI;AAHV,GAAD,CAAP;AAKA,SAAOP,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH,CAvDL;AA0DA,eAAed,OAAf","sourcesContent":["import axios from \"axios\";\nimport { MessageBox, Message } from \"element-ui\";\nimport store from \"@/store\";\nimport { getToken } from \"@/utils/auth\";\n\n// create an axios instance\nconst service = axios.create({\n    baseURL: process.env.VUE_APP_BASE_API, // url = base url + request url\n    // withCredentials: true, // send cookies when cross-domain requests\n    timeout: 5000, // request timeout\n});\n\n// request interceptor\nservice.interceptors.request.use(\n    (config) => {\n        // do something before request is sent\n\n        if (store.getters.token) {\n            // let each request carry token\n            // ['X-Token'] is a custom headers key\n            // please modify it according to the actual situation\n            config.headers[\"X-Token\"] = getToken();\n        }\n        return config;\n    },\n    (error) => {\n        // do something with request error\n        console.log(error); // for debug\n        return Promise.reject(error);\n    }\n);\n\n// response interceptor\nservice.interceptors.response.use(\n    /**\n     * If you want to get http information such as headers or status\n     * Please return  response => response\n     */\n\n    /**\n     * Determine the request status by custom code\n     * Here is just an example\n     * You can also judge the status by HTTP Status Code\n     */\n    (response) => {\n        const res = response.data;\n        return res;\n\n   \n\n        // if the custom code is not 20000, it is judged as an error.\n        // if (res.code !== 20000) {\n        //     Message({\n        //         message: res.message || \"Error\",\n        //         type: \"error\",\n        //         duration: 5 * 1000,\n        //     });\n\n        //     // 50008: Illegal token; 50012: Other clients logged in; 50014: Token expired;\n        //     if (res.code === 50008 || res.code === 50012 || res.code === 50014) {\n        //         // to re-login\n        //         MessageBox.confirm(\n        //             \"You have been logged out, you can cancel to stay on this page, or log in again\",\n        //             \"Confirm logout\", {\n        //                 confirmButtonText: \"Re-Login\",\n        //                 cancelButtonText: \"Cancel\",\n        //                 type: \"warning\",\n        //             }\n        //         ).then(() => {\n        //             store.dispatch(\"user/resetToken\").then(() => {\n        //                 location.reload();\n        //             });\n        //         });\n        //     }\n        //     return Promise.reject(new Error(res.message || \"Error\"));\n        // } else {\n        //\n        // }\n        return res;\n    },\n    (error) => {\n        console.log(\"err\" + error); // for debug\n        Message({\n            message: error.message,\n            type: \"error\",\n            duration: 5 * 1000,\n        });\n        return Promise.reject(error);\n    }\n);\n\nexport default service;"]}]}