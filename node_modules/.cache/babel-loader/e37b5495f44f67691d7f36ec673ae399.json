{"remainingRequest":"D:\\共享文件\\code space\\疫情统计分析软件\\22\\epidemicmanagementweb\\node_modules\\babel-loader\\lib\\index.js!D:\\共享文件\\code space\\疫情统计分析软件\\22\\epidemicmanagementweb\\src\\store\\modules\\tagsView.js","dependencies":[{"path":"D:\\共享文件\\code space\\疫情统计分析软件\\22\\epidemicmanagementweb\\src\\store\\modules\\tagsView.js","mtime":1652251439000},{"path":"D:\\共享文件\\code space\\疫情统计分析软件\\22\\epidemicmanagementweb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\共享文件\\code space\\疫情统计分析软件\\22\\epidemicmanagementweb\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICJEOi9cdTUxNzFcdTRFQUJcdTY1ODdcdTRFRjYvY29kZSBzcGFjZS9cdTc1QUJcdTYwQzVcdTdFREZcdThCQTFcdTUyMDZcdTY3OTBcdThGNkZcdTRFRjYvMjIvZXBpZGVtaWNtYW5hZ2VtZW50d2ViL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheSI7CmltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tICJEOi9cdTUxNzFcdTRFQUJcdTY1ODdcdTRFRjYvY29kZSBzcGFjZS9cdTc1QUJcdTYwQzVcdTdFREZcdThCQTFcdTUyMDZcdTY3OTBcdThGNkZcdTRFRjYvMjIvZXBpZGVtaWNtYW5hZ2VtZW50d2ViL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5IjsKaW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIkQ6L1x1NTE3MVx1NEVBQlx1NjU4N1x1NEVGNi9jb2RlIHNwYWNlL1x1NzVBQlx1NjBDNVx1N0VERlx1OEJBMVx1NTIwNlx1Njc5MFx1OEY2Rlx1NEVGNi8yMi9lcGlkZW1pY21hbmFnZW1lbnR3ZWIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zcGxpY2UuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zbGljZS5qcyI7CnZhciB0YWdzVmlldyA9IHsKICBzdGF0ZTogewogICAgdmlzaXRlZFZpZXdzOiBbXSwKICAgIGNhY2hlZFZpZXdzOiBbXQogIH0sCiAgbXV0YXRpb25zOiB7CiAgICBBRERfVklTSVRFRF9WSUVXUzogZnVuY3Rpb24gQUREX1ZJU0lURURfVklFV1Moc3RhdGUsIHZpZXcpIHsKICAgICAgaWYgKHN0YXRlLnZpc2l0ZWRWaWV3cy5zb21lKGZ1bmN0aW9uICh2KSB7CiAgICAgICAgcmV0dXJuIHYucGF0aCA9PT0gdmlldy5wYXRoOwogICAgICB9KSkgcmV0dXJuOwogICAgICBzdGF0ZS52aXNpdGVkVmlld3MucHVzaCh7CiAgICAgICAgbmFtZTogdmlldy5uYW1lLAogICAgICAgIHBhdGg6IHZpZXcucGF0aCwKICAgICAgICB0aXRsZTogdmlldy5tZXRhLnRpdGxlIHx8ICduby1uYW1lJwogICAgICB9KTsKCiAgICAgIGlmICghdmlldy5tZXRhLm5vQ2FjaGUpIHsKICAgICAgICBzdGF0ZS5jYWNoZWRWaWV3cy5wdXNoKHZpZXcubmFtZSk7CiAgICAgIH0KICAgIH0sCiAgICBERUxfVklTSVRFRF9WSUVXUzogZnVuY3Rpb24gREVMX1ZJU0lURURfVklFV1Moc3RhdGUsIHZpZXcpIHsKICAgICAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHN0YXRlLnZpc2l0ZWRWaWV3cy5lbnRyaWVzKCkpLAogICAgICAgICAgX3N0ZXA7CgogICAgICB0cnkgewogICAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7CiAgICAgICAgICB2YXIgX3N0ZXAkdmFsdWUgPSBfc2xpY2VkVG9BcnJheShfc3RlcC52YWx1ZSwgMiksCiAgICAgICAgICAgICAgaSA9IF9zdGVwJHZhbHVlWzBdLAogICAgICAgICAgICAgIHYgPSBfc3RlcCR2YWx1ZVsxXTsKCiAgICAgICAgICBpZiAodi5wYXRoID09PSB2aWV3LnBhdGgpIHsKICAgICAgICAgICAgc3RhdGUudmlzaXRlZFZpZXdzLnNwbGljZShpLCAxKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3IuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvci5mKCk7CiAgICAgIH0KCiAgICAgIHZhciBfaXRlcmF0b3IyID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoc3RhdGUuY2FjaGVkVmlld3MpLAogICAgICAgICAgX3N0ZXAyOwoKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKF9pdGVyYXRvcjIucygpOyAhKF9zdGVwMiA9IF9pdGVyYXRvcjIubigpKS5kb25lOykgewogICAgICAgICAgdmFyIF9pID0gX3N0ZXAyLnZhbHVlOwoKICAgICAgICAgIGlmIChfaSA9PT0gdmlldy5uYW1lKSB7CiAgICAgICAgICAgIHZhciBpbmRleCA9IHN0YXRlLmNhY2hlZFZpZXdzLmluZGV4T2YoX2kpOwogICAgICAgICAgICBzdGF0ZS5jYWNoZWRWaWV3cy5zcGxpY2UoaW5kZXgsIDEpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvcjIuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvcjIuZigpOwogICAgICB9CiAgICB9LAogICAgREVMX09USEVSU19WSUVXUzogZnVuY3Rpb24gREVMX09USEVSU19WSUVXUyhzdGF0ZSwgdmlldykgewogICAgICB2YXIgX2l0ZXJhdG9yMyA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHN0YXRlLnZpc2l0ZWRWaWV3cy5lbnRyaWVzKCkpLAogICAgICAgICAgX3N0ZXAzOwoKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKF9pdGVyYXRvcjMucygpOyAhKF9zdGVwMyA9IF9pdGVyYXRvcjMubigpKS5kb25lOykgewogICAgICAgICAgdmFyIF9zdGVwMyR2YWx1ZSA9IF9zbGljZWRUb0FycmF5KF9zdGVwMy52YWx1ZSwgMiksCiAgICAgICAgICAgICAgaSA9IF9zdGVwMyR2YWx1ZVswXSwKICAgICAgICAgICAgICB2ID0gX3N0ZXAzJHZhbHVlWzFdOwoKICAgICAgICAgIGlmICh2LnBhdGggPT09IHZpZXcucGF0aCkgewogICAgICAgICAgICBzdGF0ZS52aXNpdGVkVmlld3MgPSBzdGF0ZS52aXNpdGVkVmlld3Muc2xpY2UoaSwgaSArIDEpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvcjMuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvcjMuZigpOwogICAgICB9CgogICAgICB2YXIgX2l0ZXJhdG9yNCA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHN0YXRlLmNhY2hlZFZpZXdzKSwKICAgICAgICAgIF9zdGVwNDsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3I0LnMoKTsgIShfc3RlcDQgPSBfaXRlcmF0b3I0Lm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciBfaTIgPSBfc3RlcDQudmFsdWU7CgogICAgICAgICAgaWYgKF9pMiA9PT0gdmlldy5uYW1lKSB7CiAgICAgICAgICAgIHZhciBpbmRleCA9IHN0YXRlLmNhY2hlZFZpZXdzLmluZGV4T2YoX2kyKTsKICAgICAgICAgICAgc3RhdGUuY2FjaGVkVmlld3MgPSBzdGF0ZS5jYWNoZWRWaWV3cy5zbGljZShpbmRleCwgX2kyICsgMSk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgX2l0ZXJhdG9yNC5lKGVycik7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgX2l0ZXJhdG9yNC5mKCk7CiAgICAgIH0KICAgIH0sCiAgICBERUxfQUxMX1ZJRVdTOiBmdW5jdGlvbiBERUxfQUxMX1ZJRVdTKHN0YXRlKSB7CiAgICAgIHN0YXRlLnZpc2l0ZWRWaWV3cyA9IFtdOwogICAgICBzdGF0ZS5jYWNoZWRWaWV3cyA9IFtdOwogICAgfQogIH0sCiAgYWN0aW9uczogewogICAgYWRkVmlzaXRlZFZpZXdzOiBmdW5jdGlvbiBhZGRWaXNpdGVkVmlld3MoX3JlZiwgdmlldykgewogICAgICB2YXIgY29tbWl0ID0gX3JlZi5jb21taXQ7CiAgICAgIGNvbW1pdCgnQUREX1ZJU0lURURfVklFV1MnLCB2aWV3KTsKICAgIH0sCiAgICBkZWxWaXNpdGVkVmlld3M6IGZ1bmN0aW9uIGRlbFZpc2l0ZWRWaWV3cyhfcmVmMiwgdmlldykgewogICAgICB2YXIgY29tbWl0ID0gX3JlZjIuY29tbWl0LAogICAgICAgICAgc3RhdGUgPSBfcmVmMi5zdGF0ZTsKICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7CiAgICAgICAgY29tbWl0KCdERUxfVklTSVRFRF9WSUVXUycsIHZpZXcpOwogICAgICAgIHJlc29sdmUoX3RvQ29uc3VtYWJsZUFycmF5KHN0YXRlLnZpc2l0ZWRWaWV3cykpOwogICAgICB9KTsKICAgIH0sCiAgICBkZWxPdGhlcnNWaWV3czogZnVuY3Rpb24gZGVsT3RoZXJzVmlld3MoX3JlZjMsIHZpZXcpIHsKICAgICAgdmFyIGNvbW1pdCA9IF9yZWYzLmNvbW1pdCwKICAgICAgICAgIHN0YXRlID0gX3JlZjMuc3RhdGU7CiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgewogICAgICAgIGNvbW1pdCgnREVMX09USEVSU19WSUVXUycsIHZpZXcpOwogICAgICAgIHJlc29sdmUoX3RvQ29uc3VtYWJsZUFycmF5KHN0YXRlLnZpc2l0ZWRWaWV3cykpOwogICAgICB9KTsKICAgIH0sCiAgICBkZWxBbGxWaWV3czogZnVuY3Rpb24gZGVsQWxsVmlld3MoX3JlZjQpIHsKICAgICAgdmFyIGNvbW1pdCA9IF9yZWY0LmNvbW1pdCwKICAgICAgICAgIHN0YXRlID0gX3JlZjQuc3RhdGU7CiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgewogICAgICAgIGNvbW1pdCgnREVMX0FMTF9WSUVXUycpOwogICAgICAgIHJlc29sdmUoX3RvQ29uc3VtYWJsZUFycmF5KHN0YXRlLnZpc2l0ZWRWaWV3cykpOwogICAgICB9KTsKICAgIH0KICB9Cn07CmV4cG9ydCBkZWZhdWx0IHRhZ3NWaWV3Ow=="},{"version":3,"sources":["D:/共享文件/code space/疫情统计分析软件/22/epidemicmanagementweb/src/store/modules/tagsView.js"],"names":["tagsView","state","visitedViews","cachedViews","mutations","ADD_VISITED_VIEWS","view","some","v","path","push","name","title","meta","noCache","DEL_VISITED_VIEWS","entries","i","splice","index","indexOf","DEL_OTHERS_VIEWS","slice","DEL_ALL_VIEWS","actions","addVisitedViews","commit","delVisitedViews","Promise","resolve","delOthersViews","delAllViews"],"mappings":"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","sourcesContent":["const tagsView = {\n  state: {\n    visitedViews: [],\n    cachedViews: []\n  },\n  mutations: {\n    ADD_VISITED_VIEWS: (state, view) => {\n      if (state.visitedViews.some(v => v.path === view.path)) return\n      state.visitedViews.push({\n        name: view.name,\n        path: view.path,\n        title: view.meta.title || 'no-name'\n      })\n      if (!view.meta.noCache) {\n        state.cachedViews.push(view.name)\n      }\n    },\n    DEL_VISITED_VIEWS: (state, view) => {\n      for (const [i, v] of state.visitedViews.entries()) {\n        if (v.path === view.path) {\n          state.visitedViews.splice(i, 1)\n          break\n        }\n      }\n      for (const i of state.cachedViews) {\n        if (i === view.name) {\n          const index = state.cachedViews.indexOf(i)\n          state.cachedViews.splice(index, 1)\n          break\n        }\n      }\n    },\n    DEL_OTHERS_VIEWS: (state, view) => {\n      for (const [i, v] of state.visitedViews.entries()) {\n        if (v.path === view.path) {\n          state.visitedViews = state.visitedViews.slice(i, i + 1)\n          break\n        }\n      }\n      for (const i of state.cachedViews) {\n        if (i === view.name) {\n          const index = state.cachedViews.indexOf(i)\n          state.cachedViews = state.cachedViews.slice(index, i + 1)\n          break\n        }\n      }\n    },\n    DEL_ALL_VIEWS: (state) => {\n      state.visitedViews = []\n      state.cachedViews = []\n    }\n  },\n  actions: {\n    addVisitedViews({ commit }, view) {\n      commit('ADD_VISITED_VIEWS', view)\n    },\n    delVisitedViews({ commit, state }, view) {\n      return new Promise((resolve) => {\n        commit('DEL_VISITED_VIEWS', view)\n        resolve([...state.visitedViews])\n      })\n    },\n    delOthersViews({ commit, state }, view) {\n      return new Promise((resolve) => {\n        commit('DEL_OTHERS_VIEWS', view)\n        resolve([...state.visitedViews])\n      })\n    },\n    delAllViews({ commit, state }) {\n      return new Promise((resolve) => {\n        commit('DEL_ALL_VIEWS')\n        resolve([...state.visitedViews])\n      })\n    }\n  }\n}\n\nexport default tagsView\n"]}]}